// Code generated by Prisma (prisma@1.21.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  descriptors: (where?: DescriptorsWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  indicator: (where?: IndicatorWhereInput) => Promise<boolean>;
  keyword: (where?: KeywordWhereInput) => Promise<boolean>;
  scenario: (where?: ScenarioWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryPromise;
  categories: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Category>;
  categoriesConnection: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CategoryConnectionPromise;
  descriptors: (where: DescriptorsWhereUniqueInput) => DescriptorsPromise;
  descriptorses: (
    args?: {
      where?: DescriptorsWhereInput;
      orderBy?: DescriptorsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Descriptors>;
  descriptorsesConnection: (
    args?: {
      where?: DescriptorsWhereInput;
      orderBy?: DescriptorsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DescriptorsConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventPromise;
  events: (
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Event>;
  eventsConnection: (
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EventConnectionPromise;
  indicator: (where: IndicatorWhereUniqueInput) => IndicatorPromise;
  indicators: (
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Indicator>;
  indicatorsConnection: (
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => IndicatorConnectionPromise;
  keyword: (where: KeywordWhereUniqueInput) => KeywordPromise;
  keywords: (
    args?: {
      where?: KeywordWhereInput;
      orderBy?: KeywordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Keyword>;
  keywordsConnection: (
    args?: {
      where?: KeywordWhereInput;
      orderBy?: KeywordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => KeywordConnectionPromise;
  scenario: (where: ScenarioWhereUniqueInput) => ScenarioPromise;
  scenarios: (
    args?: {
      where?: ScenarioWhereInput;
      orderBy?: ScenarioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Scenario>;
  scenariosConnection: (
    args?: {
      where?: ScenarioWhereInput;
      orderBy?: ScenarioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ScenarioConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (
    args: { data: CategoryUpdateInput; where: CategoryWhereUniqueInput }
  ) => CategoryPromise;
  updateManyCategories: (
    args: { data: CategoryUpdateManyMutationInput; where?: CategoryWhereInput }
  ) => BatchPayloadPromise;
  upsertCategory: (
    args: {
      where: CategoryWhereUniqueInput;
      create: CategoryCreateInput;
      update: CategoryUpdateInput;
    }
  ) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createDescriptors: (data: DescriptorsCreateInput) => DescriptorsPromise;
  updateDescriptors: (
    args: { data: DescriptorsUpdateInput; where: DescriptorsWhereUniqueInput }
  ) => DescriptorsPromise;
  updateManyDescriptorses: (
    args: {
      data: DescriptorsUpdateManyMutationInput;
      where?: DescriptorsWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDescriptors: (
    args: {
      where: DescriptorsWhereUniqueInput;
      create: DescriptorsCreateInput;
      update: DescriptorsUpdateInput;
    }
  ) => DescriptorsPromise;
  deleteDescriptors: (where: DescriptorsWhereUniqueInput) => DescriptorsPromise;
  deleteManyDescriptorses: (
    where?: DescriptorsWhereInput
  ) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (
    args: { data: EventUpdateInput; where: EventWhereUniqueInput }
  ) => EventPromise;
  updateManyEvents: (
    args: { data: EventUpdateManyMutationInput; where?: EventWhereInput }
  ) => BatchPayloadPromise;
  upsertEvent: (
    args: {
      where: EventWhereUniqueInput;
      create: EventCreateInput;
      update: EventUpdateInput;
    }
  ) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createIndicator: (data: IndicatorCreateInput) => IndicatorPromise;
  updateIndicator: (
    args: { data: IndicatorUpdateInput; where: IndicatorWhereUniqueInput }
  ) => IndicatorPromise;
  updateManyIndicators: (
    args: {
      data: IndicatorUpdateManyMutationInput;
      where?: IndicatorWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertIndicator: (
    args: {
      where: IndicatorWhereUniqueInput;
      create: IndicatorCreateInput;
      update: IndicatorUpdateInput;
    }
  ) => IndicatorPromise;
  deleteIndicator: (where: IndicatorWhereUniqueInput) => IndicatorPromise;
  deleteManyIndicators: (where?: IndicatorWhereInput) => BatchPayloadPromise;
  createKeyword: (data: KeywordCreateInput) => KeywordPromise;
  updateKeyword: (
    args: { data: KeywordUpdateInput; where: KeywordWhereUniqueInput }
  ) => KeywordPromise;
  updateManyKeywords: (
    args: { data: KeywordUpdateManyMutationInput; where?: KeywordWhereInput }
  ) => BatchPayloadPromise;
  upsertKeyword: (
    args: {
      where: KeywordWhereUniqueInput;
      create: KeywordCreateInput;
      update: KeywordUpdateInput;
    }
  ) => KeywordPromise;
  deleteKeyword: (where: KeywordWhereUniqueInput) => KeywordPromise;
  deleteManyKeywords: (where?: KeywordWhereInput) => BatchPayloadPromise;
  createScenario: (data: ScenarioCreateInput) => ScenarioPromise;
  updateScenario: (
    args: { data: ScenarioUpdateInput; where: ScenarioWhereUniqueInput }
  ) => ScenarioPromise;
  updateManyScenarios: (
    args: { data: ScenarioUpdateManyMutationInput; where?: ScenarioWhereInput }
  ) => BatchPayloadPromise;
  upsertScenario: (
    args: {
      where: ScenarioWhereUniqueInput;
      create: ScenarioCreateInput;
      update: ScenarioUpdateInput;
    }
  ) => ScenarioPromise;
  deleteScenario: (where: ScenarioWhereUniqueInput) => ScenarioPromise;
  deleteManyScenarios: (where?: ScenarioWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  descriptors: (
    where?: DescriptorsSubscriptionWhereInput
  ) => DescriptorsSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  indicator: (
    where?: IndicatorSubscriptionWhereInput
  ) => IndicatorSubscriptionPayloadSubscription;
  keyword: (
    where?: KeywordSubscriptionWhereInput
  ) => KeywordSubscriptionPayloadSubscription;
  scenario: (
    where?: ScenarioSubscriptionWhereInput
  ) => ScenarioSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DescriptorsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "tag_ASC"
  | "tag_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EventOrderByInput =
  | "category_ASC"
  | "category_DESC"
  | "crawlDate_ASC"
  | "crawlDate_DESC"
  | "description_ASC"
  | "description_DESC"
  | "eventDate_ASC"
  | "eventDate_DESC"
  | "href_ASC"
  | "href_DESC"
  | "id_ASC"
  | "id_DESC"
  | "unread_ASC"
  | "unread_DESC"
  | "source_ASC"
  | "source_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IndicatorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ScenarioOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type KeywordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "searchterm_ASC"
  | "searchterm_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ScenarioUpdateManyWithoutIndicatorsInput {
  create?:
    | ScenarioCreateWithoutIndicatorsInput[]
    | ScenarioCreateWithoutIndicatorsInput;
  delete?: ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput;
  connect?: ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput;
  disconnect?: ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput;
  update?:
    | ScenarioUpdateWithWhereUniqueWithoutIndicatorsInput[]
    | ScenarioUpdateWithWhereUniqueWithoutIndicatorsInput;
  upsert?:
    | ScenarioUpsertWithWhereUniqueWithoutIndicatorsInput[]
    | ScenarioUpsertWithWhereUniqueWithoutIndicatorsInput;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface IndicatorUpsertWithWhereUniqueWithoutEventsInput {
  where: IndicatorWhereUniqueInput;
  update: IndicatorUpdateWithoutEventsDataInput;
  create: IndicatorCreateWithoutEventsInput;
}

export interface IndicatorWhereInput {
  events_every?: EventWhereInput;
  events_some?: EventWhereInput;
  events_none?: EventWhereInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  keyword?: KeywordWhereInput;
  scenarios_every?: ScenarioWhereInput;
  scenarios_some?: ScenarioWhereInput;
  scenarios_none?: ScenarioWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  AND?: IndicatorWhereInput[] | IndicatorWhereInput;
  OR?: IndicatorWhereInput[] | IndicatorWhereInput;
  NOT?: IndicatorWhereInput[] | IndicatorWhereInput;
}

export interface EventUpsertWithoutCategoriesInput {
  update: EventUpdateWithoutCategoriesDataInput;
  create: EventCreateWithoutCategoriesInput;
}

export interface ScenarioWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  indicators_every?: IndicatorWhereInput;
  indicators_some?: IndicatorWhereInput;
  indicators_none?: IndicatorWhereInput;
  AND?: ScenarioWhereInput[] | ScenarioWhereInput;
  OR?: ScenarioWhereInput[] | ScenarioWhereInput;
  NOT?: ScenarioWhereInput[] | ScenarioWhereInput;
}

export interface CategoryUpdateManyMutationInput {
  name?: String;
}

export interface DescriptorsWhereInput {
  events_every?: EventWhereInput;
  events_some?: EventWhereInput;
  events_none?: EventWhereInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  tag?: String;
  tag_not?: String;
  tag_in?: String[] | String;
  tag_not_in?: String[] | String;
  tag_lt?: String;
  tag_lte?: String;
  tag_gt?: String;
  tag_gte?: String;
  tag_contains?: String;
  tag_not_contains?: String;
  tag_starts_with?: String;
  tag_not_starts_with?: String;
  tag_ends_with?: String;
  tag_not_ends_with?: String;
  AND?: DescriptorsWhereInput[] | DescriptorsWhereInput;
  OR?: DescriptorsWhereInput[] | DescriptorsWhereInput;
  NOT?: DescriptorsWhereInput[] | DescriptorsWhereInput;
}

export interface CategoryUpdateInput {
  event?: EventUpdateOneWithoutCategoriesInput;
  name?: String;
}

export interface IndicatorUpdateInput {
  events?: EventUpdateManyWithoutIndicatorsInput;
  keyword?: KeywordUpdateOneWithoutIndicatorsInput;
  scenarios?: ScenarioUpdateManyWithoutIndicatorsInput;
  title?: String;
}

export interface EventUpdateOneWithoutCategoriesInput {
  create?: EventCreateWithoutCategoriesInput;
  update?: EventUpdateWithoutCategoriesDataInput;
  upsert?: EventUpsertWithoutCategoriesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: EventWhereUniqueInput;
}

export interface EventWhereInput {
  categories_every?: CategoryWhereInput;
  categories_some?: CategoryWhereInput;
  categories_none?: CategoryWhereInput;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  crawlDate?: DateTimeInput;
  crawlDate_not?: DateTimeInput;
  crawlDate_in?: DateTimeInput[] | DateTimeInput;
  crawlDate_not_in?: DateTimeInput[] | DateTimeInput;
  crawlDate_lt?: DateTimeInput;
  crawlDate_lte?: DateTimeInput;
  crawlDate_gt?: DateTimeInput;
  crawlDate_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  descriptorses_every?: DescriptorsWhereInput;
  descriptorses_some?: DescriptorsWhereInput;
  descriptorses_none?: DescriptorsWhereInput;
  eventDate?: DateTimeInput;
  eventDate_not?: DateTimeInput;
  eventDate_in?: DateTimeInput[] | DateTimeInput;
  eventDate_not_in?: DateTimeInput[] | DateTimeInput;
  eventDate_lt?: DateTimeInput;
  eventDate_lte?: DateTimeInput;
  eventDate_gt?: DateTimeInput;
  eventDate_gte?: DateTimeInput;
  href?: String;
  href_not?: String;
  href_in?: String[] | String;
  href_not_in?: String[] | String;
  href_lt?: String;
  href_lte?: String;
  href_gt?: String;
  href_gte?: String;
  href_contains?: String;
  href_not_contains?: String;
  href_starts_with?: String;
  href_not_starts_with?: String;
  href_ends_with?: String;
  href_not_ends_with?: String;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  indicators_every?: IndicatorWhereInput;
  indicators_some?: IndicatorWhereInput;
  indicators_none?: IndicatorWhereInput;
  unread?: Boolean;
  unread_not?: Boolean;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  AND?: EventWhereInput[] | EventWhereInput;
  OR?: EventWhereInput[] | EventWhereInput;
  NOT?: EventWhereInput[] | EventWhereInput;
}

export interface EventUpdateWithoutCategoriesDataInput {
  category?: String;
  crawlDate?: DateTimeInput;
  description?: String;
  descriptorses?: DescriptorsUpdateManyWithoutEventsInput;
  eventDate?: DateTimeInput;
  href?: String;
  indicators?: IndicatorUpdateManyWithoutEventsInput;
  unread?: Boolean;
  source?: String;
  title?: String;
}

export interface IndicatorSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: IndicatorWhereInput;
  AND?: IndicatorSubscriptionWhereInput[] | IndicatorSubscriptionWhereInput;
  OR?: IndicatorSubscriptionWhereInput[] | IndicatorSubscriptionWhereInput;
  NOT?: IndicatorSubscriptionWhereInput[] | IndicatorSubscriptionWhereInput;
}

export interface DescriptorsUpdateManyWithoutEventsInput {
  create?:
    | DescriptorsCreateWithoutEventsInput[]
    | DescriptorsCreateWithoutEventsInput;
  delete?: DescriptorsWhereUniqueInput[] | DescriptorsWhereUniqueInput;
  connect?: DescriptorsWhereUniqueInput[] | DescriptorsWhereUniqueInput;
  disconnect?: DescriptorsWhereUniqueInput[] | DescriptorsWhereUniqueInput;
  update?:
    | DescriptorsUpdateWithWhereUniqueWithoutEventsInput[]
    | DescriptorsUpdateWithWhereUniqueWithoutEventsInput;
  upsert?:
    | DescriptorsUpsertWithWhereUniqueWithoutEventsInput[]
    | DescriptorsUpsertWithWhereUniqueWithoutEventsInput;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EventWhereInput;
  AND?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
  OR?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
  NOT?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
}

export interface DescriptorsUpdateWithWhereUniqueWithoutEventsInput {
  where: DescriptorsWhereUniqueInput;
  data: DescriptorsUpdateWithoutEventsDataInput;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CategoryWhereInput;
  AND?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  OR?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  NOT?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
}

export interface DescriptorsUpdateWithoutEventsDataInput {
  tag?: String;
}

export interface IndicatorUpsertWithWhereUniqueWithoutScenariosInput {
  where: IndicatorWhereUniqueInput;
  update: IndicatorUpdateWithoutScenariosDataInput;
  create: IndicatorCreateWithoutScenariosInput;
}

export interface DescriptorsUpsertWithWhereUniqueWithoutEventsInput {
  where: DescriptorsWhereUniqueInput;
  update: DescriptorsUpdateWithoutEventsDataInput;
  create: DescriptorsCreateWithoutEventsInput;
}

export interface IndicatorUpdateWithoutScenariosDataInput {
  events?: EventUpdateManyWithoutIndicatorsInput;
  keyword?: KeywordUpdateOneWithoutIndicatorsInput;
  title?: String;
}

export interface IndicatorUpdateManyWithoutEventsInput {
  create?:
    | IndicatorCreateWithoutEventsInput[]
    | IndicatorCreateWithoutEventsInput;
  delete?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  connect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  disconnect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  update?:
    | IndicatorUpdateWithWhereUniqueWithoutEventsInput[]
    | IndicatorUpdateWithWhereUniqueWithoutEventsInput;
  upsert?:
    | IndicatorUpsertWithWhereUniqueWithoutEventsInput[]
    | IndicatorUpsertWithWhereUniqueWithoutEventsInput;
}

export interface IndicatorUpdateManyWithoutScenariosInput {
  create?:
    | IndicatorCreateWithoutScenariosInput[]
    | IndicatorCreateWithoutScenariosInput;
  delete?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  connect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  disconnect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  update?:
    | IndicatorUpdateWithWhereUniqueWithoutScenariosInput[]
    | IndicatorUpdateWithWhereUniqueWithoutScenariosInput;
  upsert?:
    | IndicatorUpsertWithWhereUniqueWithoutScenariosInput[]
    | IndicatorUpsertWithWhereUniqueWithoutScenariosInput;
}

export interface IndicatorUpdateWithWhereUniqueWithoutEventsInput {
  where: IndicatorWhereUniqueInput;
  data: IndicatorUpdateWithoutEventsDataInput;
}

export interface ScenarioUpdateInput {
  title?: String;
  description?: String;
  indicators?: IndicatorUpdateManyWithoutScenariosInput;
}

export interface IndicatorUpdateWithoutEventsDataInput {
  keyword?: KeywordUpdateOneWithoutIndicatorsInput;
  scenarios?: ScenarioUpdateManyWithoutIndicatorsInput;
  title?: String;
}

export interface IndicatorCreateManyWithoutScenariosInput {
  create?:
    | IndicatorCreateWithoutScenariosInput[]
    | IndicatorCreateWithoutScenariosInput;
  connect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
}

export interface KeywordUpdateOneWithoutIndicatorsInput {
  create?: KeywordCreateWithoutIndicatorsInput;
  update?: KeywordUpdateWithoutIndicatorsDataInput;
  upsert?: KeywordUpsertWithoutIndicatorsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: KeywordWhereUniqueInput;
}

export interface ScenarioCreateInput {
  title: String;
  description: String;
  indicators?: IndicatorCreateManyWithoutScenariosInput;
}

export interface KeywordUpdateWithoutIndicatorsDataInput {
  searchterm?: String;
}

export interface IndicatorUpsertWithWhereUniqueWithoutKeywordInput {
  where: IndicatorWhereUniqueInput;
  update: IndicatorUpdateWithoutKeywordDataInput;
  create: IndicatorCreateWithoutKeywordInput;
}

export interface KeywordUpsertWithoutIndicatorsInput {
  update: KeywordUpdateWithoutIndicatorsDataInput;
  create: KeywordCreateWithoutIndicatorsInput;
}

export interface IndicatorUpdateWithoutKeywordDataInput {
  events?: EventUpdateManyWithoutIndicatorsInput;
  scenarios?: ScenarioUpdateManyWithoutIndicatorsInput;
  title?: String;
}

export interface IndicatorUpdateManyMutationInput {
  title?: String;
}

export interface IndicatorUpdateManyWithoutKeywordInput {
  create?:
    | IndicatorCreateWithoutKeywordInput[]
    | IndicatorCreateWithoutKeywordInput;
  delete?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  connect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  disconnect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
  update?:
    | IndicatorUpdateWithWhereUniqueWithoutKeywordInput[]
    | IndicatorUpdateWithWhereUniqueWithoutKeywordInput;
  upsert?:
    | IndicatorUpsertWithWhereUniqueWithoutKeywordInput[]
    | IndicatorUpsertWithWhereUniqueWithoutKeywordInput;
}

export interface ScenarioUpdateWithWhereUniqueWithoutIndicatorsInput {
  where: ScenarioWhereUniqueInput;
  data: ScenarioUpdateWithoutIndicatorsDataInput;
}

export type ScenarioWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ScenarioUpdateWithoutIndicatorsDataInput {
  title?: String;
  description?: String;
}

export interface IndicatorCreateManyWithoutKeywordInput {
  create?:
    | IndicatorCreateWithoutKeywordInput[]
    | IndicatorCreateWithoutKeywordInput;
  connect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
}

export interface CategoryCreateInput {
  event?: EventCreateOneWithoutCategoriesInput;
  name: String;
}

export interface EventCreateWithoutIndicatorsInput {
  categories?: CategoryCreateManyWithoutEventInput;
  category: String;
  crawlDate: DateTimeInput;
  description: String;
  descriptorses?: DescriptorsCreateManyWithoutEventsInput;
  eventDate: DateTimeInput;
  href?: String;
  unread?: Boolean;
  source?: String;
  title: String;
}

export interface KeywordWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  indicators_every?: IndicatorWhereInput;
  indicators_some?: IndicatorWhereInput;
  indicators_none?: IndicatorWhereInput;
  searchterm?: String;
  searchterm_not?: String;
  searchterm_in?: String[] | String;
  searchterm_not_in?: String[] | String;
  searchterm_lt?: String;
  searchterm_lte?: String;
  searchterm_gt?: String;
  searchterm_gte?: String;
  searchterm_contains?: String;
  searchterm_not_contains?: String;
  searchterm_starts_with?: String;
  searchterm_not_starts_with?: String;
  searchterm_ends_with?: String;
  searchterm_not_ends_with?: String;
  AND?: KeywordWhereInput[] | KeywordWhereInput;
  OR?: KeywordWhereInput[] | KeywordWhereInput;
  NOT?: KeywordWhereInput[] | KeywordWhereInput;
}

export interface ScenarioUpsertWithWhereUniqueWithoutIndicatorsInput {
  where: ScenarioWhereUniqueInput;
  update: ScenarioUpdateWithoutIndicatorsDataInput;
  create: ScenarioCreateWithoutIndicatorsInput;
}

export interface EventUpsertWithWhereUniqueWithoutIndicatorsInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutIndicatorsDataInput;
  create: EventCreateWithoutIndicatorsInput;
}

export interface EventCreateWithoutCategoriesInput {
  category: String;
  crawlDate: DateTimeInput;
  description: String;
  descriptorses?: DescriptorsCreateManyWithoutEventsInput;
  eventDate: DateTimeInput;
  href?: String;
  indicators?: IndicatorCreateManyWithoutEventsInput;
  unread?: Boolean;
  source?: String;
  title: String;
}

export interface EventUpdateWithoutIndicatorsDataInput {
  categories?: CategoryUpdateManyWithoutEventInput;
  category?: String;
  crawlDate?: DateTimeInput;
  description?: String;
  descriptorses?: DescriptorsUpdateManyWithoutEventsInput;
  eventDate?: DateTimeInput;
  href?: String;
  unread?: Boolean;
  source?: String;
  title?: String;
}

export interface DescriptorsCreateWithoutEventsInput {
  tag: String;
}

export interface EventUpdateWithWhereUniqueWithoutIndicatorsInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutIndicatorsDataInput;
}

export interface IndicatorCreateWithoutEventsInput {
  keyword?: KeywordCreateOneWithoutIndicatorsInput;
  scenarios?: ScenarioCreateManyWithoutIndicatorsInput;
  title: String;
}

export interface EventUpdateManyWithoutIndicatorsInput {
  create?:
    | EventCreateWithoutIndicatorsInput[]
    | EventCreateWithoutIndicatorsInput;
  delete?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  disconnect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  update?:
    | EventUpdateWithWhereUniqueWithoutIndicatorsInput[]
    | EventUpdateWithWhereUniqueWithoutIndicatorsInput;
  upsert?:
    | EventUpsertWithWhereUniqueWithoutIndicatorsInput[]
    | EventUpsertWithWhereUniqueWithoutIndicatorsInput;
}

export interface KeywordCreateWithoutIndicatorsInput {
  searchterm: String;
}

export interface DescriptorsCreateInput {
  events?: EventCreateManyWithoutDescriptorsesInput;
  tag: String;
}

export interface ScenarioCreateWithoutIndicatorsInput {
  title: String;
  description: String;
}

export interface EventCreateManyWithoutDescriptorsesInput {
  create?:
    | EventCreateWithoutDescriptorsesInput[]
    | EventCreateWithoutDescriptorsesInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
}

export interface KeywordSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: KeywordWhereInput;
  AND?: KeywordSubscriptionWhereInput[] | KeywordSubscriptionWhereInput;
  OR?: KeywordSubscriptionWhereInput[] | KeywordSubscriptionWhereInput;
  NOT?: KeywordSubscriptionWhereInput[] | KeywordSubscriptionWhereInput;
}

export interface EventCreateWithoutDescriptorsesInput {
  categories?: CategoryCreateManyWithoutEventInput;
  category: String;
  crawlDate: DateTimeInput;
  description: String;
  eventDate: DateTimeInput;
  href?: String;
  indicators?: IndicatorCreateManyWithoutEventsInput;
  unread?: Boolean;
  source?: String;
  title: String;
}

export interface DescriptorsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DescriptorsWhereInput;
  AND?: DescriptorsSubscriptionWhereInput[] | DescriptorsSubscriptionWhereInput;
  OR?: DescriptorsSubscriptionWhereInput[] | DescriptorsSubscriptionWhereInput;
  NOT?: DescriptorsSubscriptionWhereInput[] | DescriptorsSubscriptionWhereInput;
}

export interface CategoryCreateManyWithoutEventInput {
  create?: CategoryCreateWithoutEventInput[] | CategoryCreateWithoutEventInput;
  connect?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
}

export type DescriptorsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CategoryCreateWithoutEventInput {
  name: String;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DescriptorsUpdateInput {
  events?: EventUpdateManyWithoutDescriptorsesInput;
  tag?: String;
}

export type IndicatorWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EventUpdateManyWithoutDescriptorsesInput {
  create?:
    | EventCreateWithoutDescriptorsesInput[]
    | EventCreateWithoutDescriptorsesInput;
  delete?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  disconnect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
  update?:
    | EventUpdateWithWhereUniqueWithoutDescriptorsesInput[]
    | EventUpdateWithWhereUniqueWithoutDescriptorsesInput;
  upsert?:
    | EventUpsertWithWhereUniqueWithoutDescriptorsesInput[]
    | EventUpsertWithWhereUniqueWithoutDescriptorsesInput;
}

export type KeywordWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  searchterm?: String;
}>;

export interface EventUpdateWithWhereUniqueWithoutDescriptorsesInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutDescriptorsesDataInput;
}

export interface KeywordUpdateInput {
  indicators?: IndicatorUpdateManyWithoutKeywordInput;
  searchterm?: String;
}

export interface EventUpdateWithoutDescriptorsesDataInput {
  categories?: CategoryUpdateManyWithoutEventInput;
  category?: String;
  crawlDate?: DateTimeInput;
  description?: String;
  eventDate?: DateTimeInput;
  href?: String;
  indicators?: IndicatorUpdateManyWithoutEventsInput;
  unread?: Boolean;
  source?: String;
  title?: String;
}

export interface KeywordCreateInput {
  indicators?: IndicatorCreateManyWithoutKeywordInput;
  searchterm: String;
}

export interface CategoryUpdateManyWithoutEventInput {
  create?: CategoryCreateWithoutEventInput[] | CategoryCreateWithoutEventInput;
  delete?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
  connect?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
  disconnect?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
  update?:
    | CategoryUpdateWithWhereUniqueWithoutEventInput[]
    | CategoryUpdateWithWhereUniqueWithoutEventInput;
  upsert?:
    | CategoryUpsertWithWhereUniqueWithoutEventInput[]
    | CategoryUpsertWithWhereUniqueWithoutEventInput;
}

export interface DescriptorsCreateManyWithoutEventsInput {
  create?:
    | DescriptorsCreateWithoutEventsInput[]
    | DescriptorsCreateWithoutEventsInput;
  connect?: DescriptorsWhereUniqueInput[] | DescriptorsWhereUniqueInput;
}

export interface CategoryUpdateWithWhereUniqueWithoutEventInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutEventDataInput;
}

export interface KeywordCreateOneWithoutIndicatorsInput {
  create?: KeywordCreateWithoutIndicatorsInput;
  connect?: KeywordWhereUniqueInput;
}

export interface CategoryUpdateWithoutEventDataInput {
  name?: String;
}

export interface ScenarioSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ScenarioWhereInput;
  AND?: ScenarioSubscriptionWhereInput[] | ScenarioSubscriptionWhereInput;
  OR?: ScenarioSubscriptionWhereInput[] | ScenarioSubscriptionWhereInput;
  NOT?: ScenarioSubscriptionWhereInput[] | ScenarioSubscriptionWhereInput;
}

export interface CategoryUpsertWithWhereUniqueWithoutEventInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutEventDataInput;
  create: CategoryCreateWithoutEventInput;
}

export interface ScenarioUpdateManyMutationInput {
  title?: String;
  description?: String;
}

export interface EventUpsertWithWhereUniqueWithoutDescriptorsesInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutDescriptorsesDataInput;
  create: EventCreateWithoutDescriptorsesInput;
}

export interface IndicatorCreateWithoutScenariosInput {
  events?: EventCreateManyWithoutIndicatorsInput;
  keyword?: KeywordCreateOneWithoutIndicatorsInput;
  title: String;
}

export interface DescriptorsUpdateManyMutationInput {
  tag?: String;
}

export interface IndicatorUpdateWithWhereUniqueWithoutKeywordInput {
  where: IndicatorWhereUniqueInput;
  data: IndicatorUpdateWithoutKeywordDataInput;
}

export interface EventCreateInput {
  categories?: CategoryCreateManyWithoutEventInput;
  category: String;
  crawlDate: DateTimeInput;
  description: String;
  descriptorses?: DescriptorsCreateManyWithoutEventsInput;
  eventDate: DateTimeInput;
  href?: String;
  indicators?: IndicatorCreateManyWithoutEventsInput;
  unread?: Boolean;
  source?: String;
  title: String;
}

export interface EventCreateOneWithoutCategoriesInput {
  create?: EventCreateWithoutCategoriesInput;
  connect?: EventWhereUniqueInput;
}

export interface ScenarioCreateManyWithoutIndicatorsInput {
  create?:
    | ScenarioCreateWithoutIndicatorsInput[]
    | ScenarioCreateWithoutIndicatorsInput;
  connect?: ScenarioWhereUniqueInput[] | ScenarioWhereUniqueInput;
}

export interface EventCreateManyWithoutIndicatorsInput {
  create?:
    | EventCreateWithoutIndicatorsInput[]
    | EventCreateWithoutIndicatorsInput;
  connect?: EventWhereUniqueInput[] | EventWhereUniqueInput;
}

export interface IndicatorCreateInput {
  events?: EventCreateManyWithoutIndicatorsInput;
  keyword?: KeywordCreateOneWithoutIndicatorsInput;
  scenarios?: ScenarioCreateManyWithoutIndicatorsInput;
  title: String;
}

export interface EventUpdateManyMutationInput {
  category?: String;
  crawlDate?: DateTimeInput;
  description?: String;
  eventDate?: DateTimeInput;
  href?: String;
  unread?: Boolean;
  source?: String;
  title?: String;
}

export interface EventUpdateInput {
  categories?: CategoryUpdateManyWithoutEventInput;
  category?: String;
  crawlDate?: DateTimeInput;
  description?: String;
  descriptorses?: DescriptorsUpdateManyWithoutEventsInput;
  eventDate?: DateTimeInput;
  href?: String;
  indicators?: IndicatorUpdateManyWithoutEventsInput;
  unread?: Boolean;
  source?: String;
  title?: String;
}

export interface CategoryWhereInput {
  event?: EventWhereInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: CategoryWhereInput[] | CategoryWhereInput;
  OR?: CategoryWhereInput[] | CategoryWhereInput;
  NOT?: CategoryWhereInput[] | CategoryWhereInput;
}

export interface IndicatorCreateManyWithoutEventsInput {
  create?:
    | IndicatorCreateWithoutEventsInput[]
    | IndicatorCreateWithoutEventsInput;
  connect?: IndicatorWhereUniqueInput[] | IndicatorWhereUniqueInput;
}

export interface IndicatorCreateWithoutKeywordInput {
  events?: EventCreateManyWithoutIndicatorsInput;
  scenarios?: ScenarioCreateManyWithoutIndicatorsInput;
  title: String;
}

export interface KeywordUpdateManyMutationInput {
  searchterm?: String;
}

export interface IndicatorUpdateWithWhereUniqueWithoutScenariosInput {
  where: IndicatorWhereUniqueInput;
  data: IndicatorUpdateWithoutScenariosDataInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ScenarioPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
}

export interface ScenarioPreviousValuesPromise
  extends Promise<ScenarioPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ScenarioPreviousValuesSubscription
  extends Promise<AsyncIterator<ScenarioPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface DescriptorsEdge {
  cursor: String;
}

export interface DescriptorsEdgePromise
  extends Promise<DescriptorsEdge>,
    Fragmentable {
  node: <T = DescriptorsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DescriptorsEdgeSubscription
  extends Promise<AsyncIterator<DescriptorsEdge>>,
    Fragmentable {
  node: <T = DescriptorsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Indicator {
  id: ID_Output;
  title: String;
}

export interface IndicatorPromise extends Promise<Indicator>, Fragmentable {
  events: <T = FragmentableArray<Event>>(
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  id: () => Promise<ID_Output>;
  keyword: <T = KeywordPromise>() => T;
  scenarios: <T = FragmentableArray<Scenario>>(
    args?: {
      where?: ScenarioWhereInput;
      orderBy?: ScenarioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  title: () => Promise<String>;
}

export interface IndicatorSubscription
  extends Promise<AsyncIterator<Indicator>>,
    Fragmentable {
  events: <T = Promise<AsyncIterator<EventSubscription>>>(
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  keyword: <T = KeywordSubscription>() => T;
  scenarios: <T = Promise<AsyncIterator<ScenarioSubscription>>>(
    args?: {
      where?: ScenarioWhereInput;
      orderBy?: ScenarioOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  title: () => Promise<AsyncIterator<String>>;
}

export interface DescriptorsConnection {}

export interface DescriptorsConnectionPromise
  extends Promise<DescriptorsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DescriptorsEdge>>() => T;
  aggregate: <T = AggregateDescriptorsPromise>() => T;
}

export interface DescriptorsConnectionSubscription
  extends Promise<AsyncIterator<DescriptorsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DescriptorsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDescriptorsSubscription>() => T;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Descriptors {
  id: ID_Output;
  tag: String;
}

export interface DescriptorsPromise extends Promise<Descriptors>, Fragmentable {
  events: <T = FragmentableArray<Event>>(
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  id: () => Promise<ID_Output>;
  tag: () => Promise<String>;
}

export interface DescriptorsSubscription
  extends Promise<AsyncIterator<Descriptors>>,
    Fragmentable {
  events: <T = Promise<AsyncIterator<EventSubscription>>>(
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  tag: () => Promise<AsyncIterator<String>>;
}

export interface KeywordPreviousValues {
  id: ID_Output;
  searchterm: String;
}

export interface KeywordPreviousValuesPromise
  extends Promise<KeywordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  searchterm: () => Promise<String>;
}

export interface KeywordPreviousValuesSubscription
  extends Promise<AsyncIterator<KeywordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  searchterm: () => Promise<AsyncIterator<String>>;
}

export interface CategoryEdge {
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateScenario {
  count: Int;
}

export interface AggregateScenarioPromise
  extends Promise<AggregateScenario>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScenarioSubscription
  extends Promise<AsyncIterator<AggregateScenario>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ScenarioConnection {}

export interface ScenarioConnectionPromise
  extends Promise<ScenarioConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScenarioEdge>>() => T;
  aggregate: <T = AggregateScenarioPromise>() => T;
}

export interface ScenarioConnectionSubscription
  extends Promise<AsyncIterator<ScenarioConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScenarioEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScenarioSubscription>() => T;
}

export interface Category {
  id: ID_Output;
  name: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  event: <T = EventPromise>() => T;
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  event: <T = EventSubscription>() => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface KeywordEdge {
  cursor: String;
}

export interface KeywordEdgePromise extends Promise<KeywordEdge>, Fragmentable {
  node: <T = KeywordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface KeywordEdgeSubscription
  extends Promise<AsyncIterator<KeywordEdge>>,
    Fragmentable {
  node: <T = KeywordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface Event {
  category: String;
  crawlDate: DateTimeOutput;
  description: String;
  eventDate: DateTimeOutput;
  href?: String;
  id: ID_Output;
  unread?: Boolean;
  source?: String;
  title: String;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  categories: <T = FragmentableArray<Category>>(
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  category: () => Promise<String>;
  crawlDate: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  descriptorses: <T = FragmentableArray<Descriptors>>(
    args?: {
      where?: DescriptorsWhereInput;
      orderBy?: DescriptorsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  eventDate: () => Promise<DateTimeOutput>;
  href: () => Promise<String>;
  id: () => Promise<ID_Output>;
  indicators: <T = FragmentableArray<Indicator>>(
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  unread: () => Promise<Boolean>;
  source: () => Promise<String>;
  title: () => Promise<String>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  categories: <T = Promise<AsyncIterator<CategorySubscription>>>(
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  category: () => Promise<AsyncIterator<String>>;
  crawlDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  descriptorses: <T = Promise<AsyncIterator<DescriptorsSubscription>>>(
    args?: {
      where?: DescriptorsWhereInput;
      orderBy?: DescriptorsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  eventDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  href: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  indicators: <T = Promise<AsyncIterator<IndicatorSubscription>>>(
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  unread: () => Promise<AsyncIterator<Boolean>>;
  source: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  name: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface IndicatorEdge {
  cursor: String;
}

export interface IndicatorEdgePromise
  extends Promise<IndicatorEdge>,
    Fragmentable {
  node: <T = IndicatorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IndicatorEdgeSubscription
  extends Promise<AsyncIterator<IndicatorEdge>>,
    Fragmentable {
  node: <T = IndicatorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryConnection {}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DescriptorsSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface DescriptorsSubscriptionPayloadPromise
  extends Promise<DescriptorsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DescriptorsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DescriptorsPreviousValuesPromise>() => T;
}

export interface DescriptorsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DescriptorsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DescriptorsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DescriptorsPreviousValuesSubscription>() => T;
}

export interface EventConnection {}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface DescriptorsPreviousValues {
  id: ID_Output;
  tag: String;
}

export interface DescriptorsPreviousValuesPromise
  extends Promise<DescriptorsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tag: () => Promise<String>;
}

export interface DescriptorsPreviousValuesSubscription
  extends Promise<AsyncIterator<DescriptorsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tag: () => Promise<AsyncIterator<String>>;
}

export interface ScenarioSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ScenarioSubscriptionPayloadPromise
  extends Promise<ScenarioSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ScenarioPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ScenarioPreviousValuesPromise>() => T;
}

export interface ScenarioSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScenarioSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScenarioSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ScenarioPreviousValuesSubscription>() => T;
}

export interface Scenario {
  id: ID_Output;
  title: String;
  description: String;
}

export interface ScenarioPromise extends Promise<Scenario>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  indicators: <T = FragmentableArray<Indicator>>(
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ScenarioSubscription
  extends Promise<AsyncIterator<Scenario>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  indicators: <T = Promise<AsyncIterator<IndicatorSubscription>>>(
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ScenarioEdge {
  cursor: String;
}

export interface ScenarioEdgePromise
  extends Promise<ScenarioEdge>,
    Fragmentable {
  node: <T = ScenarioPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScenarioEdgeSubscription
  extends Promise<AsyncIterator<ScenarioEdge>>,
    Fragmentable {
  node: <T = ScenarioSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface KeywordConnection {}

export interface KeywordConnectionPromise
  extends Promise<KeywordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<KeywordEdge>>() => T;
  aggregate: <T = AggregateKeywordPromise>() => T;
}

export interface KeywordConnectionSubscription
  extends Promise<AsyncIterator<KeywordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<KeywordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateKeywordSubscription>() => T;
}

export interface IndicatorConnection {}

export interface IndicatorConnectionPromise
  extends Promise<IndicatorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IndicatorEdge>>() => T;
  aggregate: <T = AggregateIndicatorPromise>() => T;
}

export interface IndicatorConnectionSubscription
  extends Promise<AsyncIterator<IndicatorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IndicatorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIndicatorSubscription>() => T;
}

export interface IndicatorPreviousValues {
  id: ID_Output;
  title: String;
}

export interface IndicatorPreviousValuesPromise
  extends Promise<IndicatorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface IndicatorPreviousValuesSubscription
  extends Promise<AsyncIterator<IndicatorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface IndicatorSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface IndicatorSubscriptionPayloadPromise
  extends Promise<IndicatorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IndicatorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IndicatorPreviousValuesPromise>() => T;
}

export interface IndicatorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IndicatorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IndicatorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IndicatorPreviousValuesSubscription>() => T;
}

export interface Keyword {
  id: ID_Output;
  searchterm: String;
}

export interface KeywordPromise extends Promise<Keyword>, Fragmentable {
  id: () => Promise<ID_Output>;
  indicators: <T = FragmentableArray<Indicator>>(
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  searchterm: () => Promise<String>;
}

export interface KeywordSubscription
  extends Promise<AsyncIterator<Keyword>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  indicators: <T = Promise<AsyncIterator<IndicatorSubscription>>>(
    args?: {
      where?: IndicatorWhereInput;
      orderBy?: IndicatorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  searchterm: () => Promise<AsyncIterator<String>>;
}

export interface EventPreviousValues {
  category: String;
  crawlDate: DateTimeOutput;
  description: String;
  eventDate: DateTimeOutput;
  href?: String;
  id: ID_Output;
  unread?: Boolean;
  source?: String;
  title: String;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  category: () => Promise<String>;
  crawlDate: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  eventDate: () => Promise<DateTimeOutput>;
  href: () => Promise<String>;
  id: () => Promise<ID_Output>;
  unread: () => Promise<Boolean>;
  source: () => Promise<String>;
  title: () => Promise<String>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  category: () => Promise<AsyncIterator<String>>;
  crawlDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  eventDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  href: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  unread: () => Promise<AsyncIterator<Boolean>>;
  source: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface EventEdge {
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIndicator {
  count: Int;
}

export interface AggregateIndicatorPromise
  extends Promise<AggregateIndicator>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIndicatorSubscription
  extends Promise<AsyncIterator<AggregateIndicator>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateKeyword {
  count: Int;
}

export interface AggregateKeywordPromise
  extends Promise<AggregateKeyword>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKeywordSubscription
  extends Promise<AsyncIterator<AggregateKeyword>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface KeywordSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface KeywordSubscriptionPayloadPromise
  extends Promise<KeywordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = KeywordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KeywordPreviousValuesPromise>() => T;
}

export interface KeywordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KeywordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KeywordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KeywordPreviousValuesSubscription>() => T;
}

export interface AggregateDescriptors {
  count: Int;
}

export interface AggregateDescriptorsPromise
  extends Promise<AggregateDescriptors>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDescriptorsSubscription
  extends Promise<AsyncIterator<AggregateDescriptors>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Descriptors",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Indicator",
    embedded: false
  },
  {
    name: "Keyword",
    embedded: false
  },
  {
    name: "Scenario",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
